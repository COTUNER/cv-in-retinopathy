mport torch
import torchvision
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F
import time


#load the data
transform = transforms.Compose(
    [ transforms.ToTensor(),
      transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])

train_data = torchvision.datasets.CIFAR10(root='./CIFAR10data', train=True,
                                        download=False, transform=transform)

train_loader = torch.utils.data.DataLoader(train_data, batch_size=4,
                                          shuffle=True, num_workers=4)

test_data = torchvision.datasets.CIFAR10(root='./CIFAR10data', train=False,
                                       download=False, transform=transform)

test_loader = torch.utils.data.DataLoader(test_data, batch_size=4,
                                         shuffle=False, num_workers=4)

classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog','frog','horse','ship', 'truck')

def imshow(img):
    img = img / 2 + 0.5   
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))




#Define a Convolution Neural Network

class Net(nn.Module):
    def num_flat_features(self, x):
        size = x.size()[1:]    #all dimensions except the batch dimension
        num_features = 1
        for s in size:
            num_features *= s
        return num_features
    
    def __init__(self):
        super(Net,self).__init__()
        
        self.conv1 = nn.Sequential(
                     nn.Conv2d(in_channels=3, out_channels=64, kernel_size=7), #64*26*26
                     nn.ReLU(),  
                     nn.MaxPool2d(kernel_size=2,stride=2),# 64*13*13
                     nn.BatchNorm2d(64)
                     #nn.Dropout(p=0.5)
        )  
        
        self.conv2 = nn.Sequential(
                     nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3), #128*11*11
                     nn.ReLU(),
                     nn.BatchNorm1d(128)
        )
        
        self.conv3 = nn.Sequential( 
                     nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3),#128*9*9
                     nn.ReLU(),  
        ) 
        self.fc1 = nn.Linear(128*4*4,1000)
        self.fc2 = nn.Linear(1000,10)
        self.fc3 = nn.AvgPool2d(kernel_size=2)

    def forward(self,x):
	#3*32*32
        x = self.conv1(x)
        #64*13*13
        x = self.conv2(x)
        #128*11*11
        x = self.conv3(x)
        #128*9*9
        x = self.fc3(x)
        #128*4*4
        x = x.view(-1, self.num_flat_features(x)) #flatten
        x = self.fc1(x)
        x = self.fc2(x)
        
            
        out = F.softmax(x)
        return out
    
net = Net()
print(net)



#Define a Loss function and optimizer

criterion = nn.CrossEntropyLoss()
optimzer = optim.SGD(net.parameters(), lr = 0.001, momentum = 0.9) 

trainst = time.time()




#Train the network
for epoch in range(1):
    running_loss = 0.0
    for i, data in enumerate(train_loader,0):
        input, target = data
        input, target = Variable(input),Variable(target)
        
        optimzer.zero_grad()
        output = net(input)
        loss = criterion(output,target) 

        loss.backward()
        optimzer.step()
        running_loss += loss.data[0]
        if i % 2000 ==1999:
            toutput = net(input)
            
            tpred_y = torch.max(toutput, 1)[1]
            accuracy = sum(tpred_y == target).data.numpy()[0] / float(target.size(0))
            print ('[%d,%5d]loss:%.3f' % (epoch+1,i+1,running_loss/2000),'=>temporary accuracy: ',accuracy)
            running_loss = 0.0

print('Finished Training')
print("Training Running Time: ",time.time()-trainst)


# 5. Test the network on the test data
testst = time.time()
hitt = 0
summ = 0
for i, data in enumerate(test_loader,0):
    inputs, target = data
    target = target.numpy()


    outputs = net(Variable(inputs))
    _, pred = torch.max(outputs.data,1)


    hit = 0
    for i in range(len(pred)):
        if target[i]==pred[i]:
            hit +=1
    hitt += hit
    summ += len(pred)
print('Accuracy On Testset: ',hitt/summ)
print('Test Running Time: ',time.time()-testst)
